.MODEL SMALL
.STACK 100H

.DATA
    ; Login credentials
    username DB 'admin$'
    password DB '1234$'
    input_user DB 20, ?, 20 DUP('$')
    input_pass DB 20, ?, 20 DUP('$')
    
    ; Menu items and prices
    menu_header DB 13, 10, '======= FOOD ORDERING SYSTEM MENU =======', 13, 10
               DB '1. Burger    - RM15.50', 13, 10
               DB '2. Pizza     - RM25.00', 13, 10
               DB '3. Pasta     - RM18.50', 13, 10
               DB '4. Sandwich  - RM12.00', 13, 10
               DB '5. Fries     - RM8.50', 13, 10
               DB '6. Drink     - RM5.00', 13, 10
               DB '=========================================', 13, 10, '$'
    
    prices DW 1550, 2500, 1850, 1200, 850, 500  ; Prices in cents
    item_names DB 'Burger   $'
              DB 'Pizza    $'
              DB 'Pasta    $'
              DB 'Sandwich $'
              DB 'Fries    $'
              DB 'Drink    $'
    
    ; Order storage
    quantities DB 6 DUP(0)
    order_subtotal DW 0
    tax_amount DW 0
    final_total DW 0
    
    ; System messages
    welcome_msg DB 13, 10, '************************************', 13, 10
               DB '*   WELCOME TO FOOD ORDER SYSTEM   *', 13, 10
               DB '************************************', 13, 10, '$'
    
    login_header DB 13, 10, '========== LOGIN REQUIRED ==========', 13, 10, '$'
    user_prompt DB 'Enter Username: $'
    pass_prompt DB 'Enter Password: $'
    login_success DB 13, 10, 'Login Successful! Welcome!', 13, 10, '$'
    login_fail DB 13, 10, 'ERROR: Invalid credentials! Try again.', 13, 10, '$'
    
    main_menu_header DB 13, 10, '============ MAIN MENU ============', 13, 10, '$'
    main_menu_options DB '1. View Menu & Current Order', 13, 10
                     DB '2. Place New Order', 13, 10
                     DB '3. View Receipt', 13, 10
                     DB '4. Clear All Orders', 13, 10
                     DB '5. Logout', 13, 10
                     DB '===================================', 13, 10
                     DB 'Enter your choice (1-5): $'
    
    order_header DB 13, 10, '=========== PLACE ORDER ===========', 13, 10, '$'
    item_prompt DB 'Enter item number (1-6) or 0 to finish: $'
    qty_prompt DB 'Enter quantity (1-9): $'
    
    current_order_header DB 13, 10, '======== CURRENT ORDER ========', 13, 10, '$'
    no_items_msg DB 'No items in cart.', 13, 10, '$'
    
    receipt_header DB 13, 10, '========== ORDER RECEIPT ==========', 13, 10, '$'
    receipt_footer DB '===================================', 13, 10, '$'
    
    ; Status messages
    item_added_msg DB ' item(s) added to cart!', 13, 10, '$'
    invalid_choice_msg DB 'ERROR: Invalid choice! Please enter 1-5.', 13, 10, '$'
    invalid_item_msg DB 'ERROR: Invalid item! Please enter 1-6.', 13, 10, '$'
    invalid_qty_msg DB 'ERROR: Invalid quantity! Please enter 1-9.', 13, 10, '$'
    max_qty_msg DB 'ERROR: Maximum quantity (9) reached for this item!', 13, 10, '$'
    confirm_order_msg DB 'Confirm this order? (y/n): $'
    order_confirmed_msg DB 13, 10, 'Order confirmed and calculated!', 13, 10, '$'
    order_cancelled_msg DB 13, 10, 'Order cancelled.', 13, 10, '$'
    cart_cleared_msg DB 13, 10, 'All orders cleared successfully!', 13, 10, '$'
    no_order_receipt_msg DB 'No order to display! Please place an order first.', 13, 10, '$'
    logout_msg DB 13, 10, 'Thank you for using our Food Ordering System!', 13, 10
              DB 'Goodbye!', 13, 10, '$'
    
    ; Display formatting
    newline DB 13, 10, '$'
    spaces DB '   $'
    dash DB ' - $'
    qty_label DB ' x $'
    subtotal_label DB 'Subtotal: RM$'
    tax_label DB 'Tax (6%): RM$'
    total_label DB 'Total Amount: RM$'

.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX
    
    ; Display welcome message
    LEA DX, welcome_msg
    MOV AH, 09H
    INT 21H
    
    ; Login process
    CALL LOGIN_SYSTEM
    
    ; Main application loop
    MAIN_LOOP:
        CALL SHOW_MAIN_MENU
        CALL GET_MENU_CHOICE
        
        CMP AL, '1'
        JE VIEW_MENU_OPTION
        CMP AL, '2'
        JE PLACE_ORDER_OPTION
        CMP AL, '3'
        JE VIEW_RECEIPT_OPTION
        CMP AL, '4'
        JE CLEAR_ORDER_OPTION
        CMP AL, '5'
        JE LOGOUT_OPTION
        
        ; Invalid choice
        LEA DX, invalid_choice_msg
        MOV AH, 09H
        INT 21H
        JMP MAIN_LOOP
    
    VIEW_MENU_OPTION:
        CALL VIEW_MENU_AND_CART
        JMP MAIN_LOOP
    
    PLACE_ORDER_OPTION:
        CALL PLACE_ORDER_SYSTEM
        JMP MAIN_LOOP
    
    VIEW_RECEIPT_OPTION:
        CALL DISPLAY_RECEIPT
        JMP MAIN_LOOP
    
    CLEAR_ORDER_OPTION:
        CALL CLEAR_ALL_ORDERS
        JMP MAIN_LOOP
    
    LOGOUT_OPTION:
        LEA DX, logout_msg
        MOV AH, 09H
        INT 21H
        JMP EXIT_PROGRAM
    
    EXIT_PROGRAM:
        MOV AH, 4CH
        INT 21H
MAIN ENDP

; ============= LOGIN MODULE =============
LOGIN_SYSTEM PROC
    LOGIN_LOOP:
        LEA DX, login_header
        MOV AH, 09H
        INT 21H
        
        ; Get username
        LEA DX, user_prompt
        MOV AH, 09H
        INT 21H
        
        LEA DX, input_user
        MOV AH, 0AH
        INT 21H
        
        ; Get password
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
        LEA DX, pass_prompt
        MOV AH, 09H
        INT 21H
        
        LEA DX, input_pass
        MOV AH, 0AH
        INT 21H
        
        ; Simple validation (check first character)
        MOV AL, [input_user + 2]
        CMP AL, 'a'
        JNE LOGIN_FAILED
        
        MOV AL, [input_pass + 2]
        CMP AL, '1'
        JNE LOGIN_FAILED
        
        ; Login successful
        LEA DX, login_success
        MOV AH, 09H
        INT 21H
        RET
        
    LOGIN_FAILED:
        LEA DX, login_fail
        MOV AH, 09H
        INT 21H
        JMP LOGIN_LOOP
LOGIN_SYSTEM ENDP

; ============= MENU DISPLAY MODULE =============
SHOW_MAIN_MENU PROC
    LEA DX, main_menu_header
    MOV AH, 09H
    INT 21H
    
    LEA DX, main_menu_options
    MOV AH, 09H
    INT 21H
    RET
SHOW_MAIN_MENU ENDP

GET_MENU_CHOICE PROC
    MOV AH, 01H
    INT 21H
    RET
GET_MENU_CHOICE ENDP

; ============= VIEW MENU AND CART MODULE =============
VIEW_MENU_AND_CART PROC
    ; Display menu
    LEA DX, menu_header
    MOV AH, 09H
    INT 21H
    
    ; Display current cart
    CALL DISPLAY_CURRENT_CART
    RET
VIEW_MENU_AND_CART ENDP

DISPLAY_CURRENT_CART PROC
    LEA DX, current_order_header
    MOV AH, 09H
    INT 21H
    
    MOV BX, 0
    MOV CX, 6
    MOV DL, 0  ; Flag for items found
    
    CART_LOOP:
        CMP quantities[BX], 0
        JE SKIP_CART_ITEM
        
        MOV DL, 1  ; Set flag
        
        ; Display item number
        MOV AL, BL
        ADD AL, '1'
        MOV AH, 02H
        MOV DH, AL
        MOV DL, DH
        INT 21H
        
        LEA DX, dash
        MOV AH, 09H
        INT 21H
        
        ; Display item name
        CALL DISPLAY_ITEM_NAME
        
        LEA DX, qty_label
        MOV AH, 09H
        INT 21H
        
        ; Display quantity
        MOV AL, quantities[BX]
        ADD AL, '0'
        MOV DL, AL
        MOV AH, 02H
        INT 21H
        
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
    SKIP_CART_ITEM:
        INC BX
        LOOP CART_LOOP
    
    CMP DL, 0
    JNE CART_END
    
    LEA DX, no_items_msg
    MOV AH, 09H
    INT 21H
    
    CART_END:
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        RET
DISPLAY_CURRENT_CART ENDP

DISPLAY_ITEM_NAME PROC
    PUSH BX
    MOV AL, 9  ; Length of each item name
    MUL BL
    MOV SI, AX
    LEA DX, item_names[SI]
    MOV AH, 09H
    INT 21H
    POP BX
    RET
DISPLAY_ITEM_NAME ENDP

; ============= ORDER PLACING MODULE =============
PLACE_ORDER_SYSTEM PROC
    LEA DX, order_header
    MOV AH, 09H
    INT 21H
    
    ORDER_INPUT_LOOP:
        LEA DX, item_prompt
        MOV AH, 09H
        INT 21H
        
        ; Get item choice
        MOV AH, 01H
        INT 21H
        MOV BL, AL
        
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
        CMP BL, '0'
        JE FINISH_ORDERING
        
        CMP BL, '1'
        JL INVALID_ITEM_INPUT
        CMP BL, '6'
        JG INVALID_ITEM_INPUT
        
        ; Valid item, get quantity
        LEA DX, qty_prompt
        MOV AH, 09H
        INT 21H
        
        MOV AH, 01H
        INT 21H
        MOV CL, AL
        
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
        CMP CL, '1'
        JL INVALID_QTY_INPUT
        CMP CL, '9'
        JG INVALID_QTY_INPUT
        
        ; Add to cart
        SUB BL, '1'  ; Convert to index
        MOV BH, 0
        SUB CL, '0'  ; Convert to number
        
        ; Check maximum quantity
        MOV AL, quantities[BX]
        ADD AL, CL
        CMP AL, 9
        JG MAX_QTY_EXCEEDED
        
        ; Add to existing quantity
        MOV quantities[BX], AL
        
        ; Confirmation message
        MOV DL, CL
        ADD DL, '0'
        MOV AH, 02H
        INT 21H
        
        LEA DX, item_added_msg
        MOV AH, 09H
        INT 21H
        
        JMP ORDER_INPUT_LOOP
        
    INVALID_ITEM_INPUT:
        LEA DX, invalid_item_msg
        MOV AH, 09H
        INT 21H
        JMP ORDER_INPUT_LOOP
        
    INVALID_QTY_INPUT:
        LEA DX, invalid_qty_msg
        MOV AH, 09H
        INT 21H
        JMP ORDER_INPUT_LOOP
        
    MAX_QTY_EXCEEDED:
        LEA DX, max_qty_msg
        MOV AH, 09H
        INT 21H
        JMP ORDER_INPUT_LOOP
        
    FINISH_ORDERING:
        ; Check if any items in cart
        CALL CHECK_CART_EMPTY
        CMP AL, 1
        JE NO_ITEMS_TO_CONFIRM
        
        ; Confirm order
        LEA DX, confirm_order_msg
        MOV AH, 09H
        INT 21H
        
        MOV AH, 01H
        INT 21H
        MOV BL, AL
        
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
        CMP BL, 'y'
        JE CONFIRM_ORDER
        CMP BL, 'Y'
        JE CONFIRM_ORDER
        
        ; Cancel order - clear cart
        CALL CLEAR_ALL_ORDERS
        LEA DX, order_cancelled_msg
        MOV AH, 09H
        INT 21H
        RET
        
    CONFIRM_ORDER:
        CALL CALCULATE_ORDER_TOTALS
        LEA DX, order_confirmed_msg
        MOV AH, 09H
        INT 21H
        RET
        
    NO_ITEMS_TO_CONFIRM:
        LEA DX, no_items_msg
        MOV AH, 09H
        INT 21H
        RET
PLACE_ORDER_SYSTEM ENDP

CHECK_CART_EMPTY PROC
    MOV BX, 0
    MOV CX, 6
    
    CHECK_LOOP:
        CMP quantities[BX], 0
        JNE CART_NOT_EMPTY
        INC BX
        LOOP CHECK_LOOP
    
    MOV AL, 1  ; Empty
    RET
    
    CART_NOT_EMPTY:
        MOV AL, 0  ; Not empty
        RET
CHECK_CART_EMPTY ENDP

; ============= CALCULATION MODULE =============
CALCULATE_ORDER_TOTALS PROC
    MOV order_subtotal, 0
    MOV BX, 0
    MOV CX, 6
    
    CALC_LOOP:
        CMP quantities[BX], 0
        JE SKIP_CALC
        
        ; Calculate item total
        MOV AL, quantities[BX]
        MOV AH, 0
        MOV SI, BX
        SHL SI, 1  ; Word array index
        MUL prices[SI]
        
        ADD order_subtotal, AX
        
    SKIP_CALC:
        INC BX
        LOOP CALC_LOOP
    
    ; Calculate tax (6%)
    MOV AX, order_subtotal
    MOV BX, 6
    MUL BX
    MOV BX, 100
    DIV BX
    MOV tax_amount, AX
    
    ; Calculate final total
    MOV AX, order_subtotal
    ADD AX, tax_amount
    MOV final_total, AX
    
    RET
CALCULATE_ORDER_TOTALS ENDP

; ============= RECEIPT MODULE =============
DISPLAY_RECEIPT PROC
    ; Check if order exists
    CMP order_subtotal, 0
    JE NO_ORDER_EXISTS
    
    LEA DX, receipt_header
    MOV AH, 09H
    INT 21H
    
    ; Display ordered items
    MOV BX, 0
    MOV CX, 6
    
    RECEIPT_LOOP:
        CMP quantities[BX], 0
        JE SKIP_RECEIPT_ITEM
        
        ; Item quantity
        MOV AL, quantities[BX]
        ADD AL, '0'
        MOV DL, AL
        MOV AH, 02H
        INT 21H
        
        LEA DX, qty_label
        MOV AH, 09H
        INT 21H
        
        ; Item name
        CALL DISPLAY_ITEM_NAME
        
        LEA DX, newline
        MOV AH, 09H
        INT 21H
        
    SKIP_RECEIPT_ITEM:
        INC BX
        LOOP RECEIPT_LOOP
    
    ; Display totals
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    LEA DX, subtotal_label
    MOV AH, 09H
    INT 21H
    
    MOV AX, order_subtotal
    CALL DISPLAY_CURRENCY
    
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    LEA DX, tax_label
    MOV AH, 09H
    INT 21H
    
    MOV AX, tax_amount
    CALL DISPLAY_CURRENCY
    
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    LEA DX, total_label
    MOV AH, 09H
    INT 21H
    
    MOV AX, final_total
    CALL DISPLAY_CURRENCY
    
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    LEA DX, receipt_footer
    MOV AH, 09H
    INT 21H
    
    RET
    
    NO_ORDER_EXISTS:
        LEA DX, no_order_receipt_msg
        MOV AH, 09H
        INT 21H
        RET
DISPLAY_RECEIPT ENDP

DISPLAY_CURRENCY PROC
    ; Simple currency display (divide by 100)
    MOV BX, 100
    DIV BX  ; AX = dollars, DX = cents
    
    ; Display dollars
    ADD AL, '0'
    MOV DL, AL
    MOV AH, 02H
    INT 21H
    
    ; Display decimal point
    MOV DL, '.'
    MOV AH, 02H
    INT 21H
    
    ; Display cents (simplified)
    MOV AX, DX
    MOV BL, 10
    DIV BL
    
    ; Tens digit
    ADD AL, '0'
    MOV DL, AL
    MOV AH, 02H
    INT 21H
    
    ; Units digit
    ADD AH, '0'
    MOV DL, AH
    MOV AH, 02H
    INT 21H
    
    RET
DISPLAY_CURRENCY ENDP

; ============= CLEAR ORDER MODULE =============
CLEAR_ALL_ORDERS PROC
    MOV BX, 0
    MOV CX, 6
    
    CLEAR_LOOP:
        MOV quantities[BX], 0
        INC BX
        LOOP CLEAR_LOOP
    
    MOV order_subtotal, 0
    MOV tax_amount, 0
    MOV final_total, 0
    
    LEA DX, cart_cleared_msg
    MOV AH, 09H
    INT 21H
    
    RET
CLEAR_ALL_ORDERS ENDP

END MAIN
